[tool.poetry]
name = "arrange-it"
version = "0.1.1"
description = ""
authors = ["Maxim Dunaev"]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.85.1"
uvicorn = "^0.18.3"
asyncio = "^3.4.3"
PyJWT = "^2.6.0"
python-decouple = "^3.6"
pydantic = {extras = ["email"], version = "^1.10.2"}
python-multipart = "^0.0.5"
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
loguru = "^0.6.0"
python-dotenv = "^0.21.0"
asyncpg = "^0.27.0"

[tool.poetry.dev-dependencies]
pytest-asyncio = "^0.19.0"
pytest = "^7.1.3"
lxml = "^4.9.1"
pylint = "^2.15.7"
asyncpg-stubs = "^0.27.0"
black = {version = "^22.10.0", allow-prereleases = true}
pydantic = "^1.10.2"
mypy = "^0.991"
pre-commit = "^2.20.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100

[tool.isort]
line_length = "100"
combine_as_imports = "true"
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
default_section = "THIRDPARTY"
known_first_party = "app"
profile = "black"

[tool.mypy]
python_version = '3.10'
check_untyped_defs = true
disallow_any_generics = true
follow_imports = 'silent'
no_implicit_reexport = true
show_error_codes = true
warn_redundant_casts = true
warn_unused_ignores = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "loguru.*",
    "aiohttp.*",
    "pytest.*",
]
ignore_missing_imports = true

[tool.pylint]
[tool.pylint.master]
ignore = ['migrations']
jobs = 0
persistent = ['yes']
unsafe-load-any-extension = ['no']

[tool.pylint.'MESSAGES CONTROL']
disable = ['all']
enable = [
  'old-ne-operator,old-octal-literal,apply-builtin,basestring-builtin,buffer-builtin,cmp-builtin,unichr-builtin,C0203,C0204,C0303,C0304,C0321,C0325,C1001,E0001,E0101,E0104,E0105,E0108,E0213,E0601,E0602,E0701,E0710,E0711,E0712,E1001-E1004,E1121,E1122,E1200,E1201,E1205,E1206,E1300-E1306,W0101,W0104,W0107,W0109,W0231,W0401',
]

[tool.pylint.'REPORTS']
evaluation = ['10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)']
output-format = ['text']
reports = ['no']
score = ['yes']

[tool.pylint.'REFACTORING']
max-nested-blocks = 5

[tool.pylint.'MISCELLANEOUS']
notes = ['FIXME,XXX,TODO']

[tool.pylint.'TYPECHECK']
contextmanager-decorators = ['contextlib.contextmanager']
ignore-mixin-members = ['yes']
ignore-on-opaque-inference = ['yes']
ignored-classes = ['optparse.Values,thread._local,_thread._local']
missing-member-hint = ['yes']
missing-member-hint-distance = 1
missing-member-max-choices = 1

[tool.pylint.'FORMAT']
ignore-long-lines = ['^\s*(# )?<?https?://\S+>?$']
indent-after-paren = 4
indent-string = '    '
max-line-length = 100
max-module-lines = 1000
no-space-check = ['trailing-comma,dict-separator']
single-line-class-stmt = ['no']
single-line-if-stmt = ['no']

[tool.pylint.'LOGGING']
logging-modules = ['logging']

[tool.pylint.'BASIC']
argument-name-hint = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
argument-rgx = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
attr-name-hint = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
attr-rgx = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
bad-names = ['foo,bar,baz,toto,tutu,tata']
class-attribute-name-hint = ['([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$']
class-attribute-rgx = ['([A-Za-z_][A-Za-z0-9_]{2,30}|(__.*__))$']
class-name-hint = ['[A-Z_][a-zA-Z0-9]+$']
class-rgx = ['[A-Z_][a-zA-Z0-9]+$']
const-name-hint = ['(([A-Z_][A-Z0-9_]*)|(__.*__))$']
const-rgx = ['(([A-Z_][A-Z0-9_]*)|(__.*__))$']
docstring-min-length = -1
function-name-hint = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
function-rgx = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
good-names = ['i,j,k,ex,Run,_,x,y,o,id']
include-naming-hint = ['no']
inlinevar-name-hint = ['[A-Za-z_][A-Za-z0-9_]*$']
inlinevar-rgx = ['[A-Za-z_][A-Za-z0-9_]*$']
method-name-hint = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
method-rgx = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
module-name-hint = ['(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$']
module-rgx = ['(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$']
no-docstring-rgx = ['^_']
property-classes = ['abc.abstractproperty']
variable-name-hint = ['(([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']
variable-rgx = ['(([^lO])|([a-z][a-z0-9_]{2,30})|(_[a-z0-9_]*))$']


[tool.pylint.'VARIABLES']
allow-global-unused-variables = ['yes']
callbacks = ['cb_,_cb']
dummy-variables-rgx = ['_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_']
ignored-argument-names = ['_.*|^ignored_|^unused_']
init-import = ['no']
redefining-builtins-modules = ['six.moves,future.builtins']

[tool.pylint.'SIMILARITIES']
ignore-comments = ['yes']
ignore-docstrings = ['yes']
ignore-imports = ['no']
min-similarity-lines = 4

[tool.pylint.'SPELLING']
spelling-store-unknown-words = ['no']

[tool.pylint.'EXCEPTIONS']
overgeneral-exceptions = ['Exception']
